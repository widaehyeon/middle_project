<?xml version="1.0" encoding="UTF-8"?>
<!-- DOCTYPE 지정 -->
<!DOCTYPE mapper   PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="qna">


<select id="countList" resultType="int" >
select count(*) from qna
</select>

<!-- 회원이 "문의"글 등록 -->
<insert id="insertQna" parameterType="QnaVO">
INSERT INTO qna(
			qna_CODE,
			MEM_ID,
			qna_title,
			qna_CONTENT,
			qna_DATE,
			qna_status,
			REPLY_CONTENT
	) VALUES (
			qna_seq.nextval,
			#{memId},
			#{qnaTitle},
			#{qnaContent},
			sysdate,
			'문의 신청',
			'답변 미등록'
	)
</insert>

<!-- 관리자가 "답변"글 등록 --> 					
<update id="insertReply" parameterType="QnaVO">
	update qna
	set 
		qna_status = '답변 완료',
		reply_title = #{replyTitle},
		reply_content =#{replyContent},
		REPLY_DATE = sysdate,
		REPLY_STATUS = NULL
where qna_code =  #{qnaCode}
</update>


<!--문의글이 있는지 글 번호로 체크  -->
<select id="checkQna" parameterType="String" resultType="int">
select count(*) as cnt
from qna
where qna_code = #{qnaCode}
</select>

<!-- 회원이 "문의"글 수정 -->
<update id="updateQna" parameterType="QnaVO">
 update qna
    set qna_code = #{qnaCode}, 
  		MEM_ID =  #{memId},
 		QNA_TITLE =  #{qnaTitle},
 	    QNA_CONTENT = #{qnaContent},
    	QNA_DATE = sysdate,
    	QNA_STATUS ='문의 수정'
  where qna_code = #{qnaCode}
</update>

<!-- 관리자가 "답변"글 수정 -->
<update id="updateReply" parameterType="QnaVO">
	update qna
	set qna_status = '답변 완료',
	reply_title = #{replyTitle},
	reply_content =#{replyContent},
	REPLY_DATE = sysdate,
	REPLY_STATUS = NULL
	where qna_code = #{qnaCode}
</update>

<!-- 회원이 "문의"글 삭제 -->
 <delete id="deleteQna" parameterType="String">
  delete qna 
     where qna_code = #{qnaCode}
</delete>

<!-- 관리자가 "답변"글 삭제 -->

 <update id="deleteReply" parameterType="QnaVO">
	update qna
	set qna_status = '문의 신청',
	reply_title = null,
	reply_content =null,
	REPLY_DATE = null,
	REPLY_STATUS = NULL
	where qna_code = #{qnaCode}
</update>


<!-- qna 목록 조회 -->
<select id="selectAllQna" resultType="QnaVO" parameterType="map" >
SELECT A.* 
		 FROM(
			 SELECT ROWNUM AS RNUM,
					B.* 
			   FROM (
					 SELECT * FROM qna
					 where 1=1
					 	<if test="sfl != null and sfl != ''"> 
						   <choose>
						      <when test="sfl.equalsIgnoreCase('wr_subject')">
						           and QNA_TITLE like '%' || #{stx} || '%'
						      </when> 
						      <when test="sfl.equalsIgnoreCase('wr_content')">
						           and QNA_CONTENT like '%' || #{stx} || '%'
						      </when>
						      <otherwise>
						           and (QNA_TITLE like '%' || #{stx} || '%' OR QNA_CONTENT like '%' || #{stx} || '%')
						   </otherwise> 
						   </choose> 
						</if>
					 
					 ORDER BY ROWNUM DESC)B
				
	<![CDATA[
		   	   WHERE ROWNUM <= #{end})A 
		 	where A.RNUM >= #{start} 
	
	order by qna_code desc
	]]>
	
</select>


<!-- QNA 글 상세 조회 -->
	<select id="selectQna" resultType="QnaVO" parameterType="String">
 SELECT
		a.QNA_TITLE,
		a.QNA_CODE,
		a.QNA_content,
		a.QNA_date,
		a.QNA_STATUS,
		a.REPLY_DATE,
		a.reply_title,
		a.reply_content,
		a.reply_status,
		a.mem_id,
		b.MEM_NM,
		C.ADMIN_NM	
   FROM QNA A, MEMBER B, ADMIN C
   WHERE A.MEM_ID = B.MEM_ID 
   AND A.ADMIN_ID = C.ADMIN_ID
   and a.qna_code = #{qnaCode}
	</select>
	

<!-- 마이페이지에서 해당 회원의 문의내역을 확인하기 위한 메서드 -->
<select id="selectMypageQna" parameterType="String" resultType="vo.QnaVO">
	select     
			QNA_CODE,
			MEM_ID,
			QNA_TITLE,
			QNA_CONTENT,
			QNA_DATE,
			QNA_STATUS,
			ADMIN_ID,
			REPLY_TITLE,
			REPLY_CONTENT,
			REPLY_DATE,
			REPLY_STATUS 
	from QNA
	where MEM_ID=#{memId}

</select>	
	
	

</mapper>